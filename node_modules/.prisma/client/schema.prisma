generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      Role      @default(USER)
  bookings  Booking[]
  orders    Order[]
}

model PhotographyStudio {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  address     String?  @db.VarChar(255)
  phoneNumber String?  @db.VarChar(20)
  email       String?  @unique @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Images      Image[]
}

model Image {
  id            String            @id @default(uuid())
  description   String?           @db.VarChar(255)
  softCopyPrice Decimal?
  hardCopyPrice Decimal?
  studioId      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  bookings      Booking[]
  studio        PhotographyStudio @relation(fields: [studioId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
}

model Booking {
  id        String   @id @default(uuid())
  userId    String
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String?
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  isPaid     Boolean     @default(false)
  bookings   Booking[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments   Payment[]
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  imageId    String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  totalPrice Decimal  @default(0.0)
  image      Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String   @id @default(uuid())
  amount    Decimal  @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  STAFF
}
