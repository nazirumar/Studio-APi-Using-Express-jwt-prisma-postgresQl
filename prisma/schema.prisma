generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
  STAFF
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders    Order[]
  bookings  Booking[]
}

model PhotographyStudio {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  address     String?  @db.VarChar(255)
  phoneNumber String?  @db.VarChar(20)
  email       String?  @unique @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  Images Image[]
}

model Image {
  id             String   @id @default(uuid())
  description    String?  @db.VarChar(255)
  softCopyPrice  Decimal?  
  hardCopyPrice  Decimal? 
  studioId       String
  studio         PhotographyStudio? @relation(fields: [studioId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  bookings       Booking[]
  orderItems     OrderItem[]
}



model Booking {
  id        String   @id @default(uuid())
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orderId   String?  // Allow null if booking isn't linked to an order
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id        String   @id @default(uuid())
  userId    String   
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPaid    Boolean  @default(false) // New field to indicate if the order is paid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orderItems OrderItem[]
  bookings   Booking[]   // Changed to plural for consistency
  payments   Payment[]   // Changed to plural
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  totalPrice Decimal  @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String  
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Decimal  @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
